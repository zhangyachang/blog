#!/usr/bin/env node

/**
 * Module dependencies.
 */
var app = require('../app');
var debug = require('debug')('blog:server');
var http = require('http');
var ws = require('socket.io');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '8000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port, () => {
  console.log(`${port}端口服务应用启动成功`);
});
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

//用ws监控这个东西
/*
    {
      userid:
      userimg:

    }
*/

var io = ws(server);
var userList = {},
    usernum = 0;
io.on('connection',socket=>{
  //回调函数里面每个socket都是独立的 每个用户都是独立的
  socket.on('login',data=>{
    console.log(data);
    userList[data.id] = data.name;
    usernum++;
    socket.name = data.name;
    socket.id = data.id;
    socket.userimg = data.userimg;
  });

  socket.on('msg',data=>{
    console.log(userList);
    console.log(data);
    data.userid = socket.id;
    data.username = socket.name;
    data.userimg = socket.userimg;
    io.emit('chat',data);
  });
  socket.on('disconnect',()=>{
    delete userList[socket.id];
    console.log(socket.id);
    usernum--;
    io.emit('out',{name:socket.name,num:usernum,userList:userList});
  })

});




